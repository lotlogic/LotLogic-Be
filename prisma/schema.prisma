generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model estate {
  id         BigInt   @id @default(autoincrement())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  address    String?
  email      String?
  logoUrl    String?
  phone      String?
  themeColor String?
  lots       lot[]
}

model lot {
  id             BigInt                   @id @default(autoincrement())
  blockKey       String                   @unique
  blockNumber    Int?
  sectionNumber  Int?
  areaSqm        Float
  zoning         String
  address        String?
  district       String?
  division       String?
  lifecycleStage String?
  geojson        Json?
  geometry       Unsupported("geometry")?
  estateId       BigInt?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  overlays       String[]
  designOnLots   designOnLot[]
  enquiries      enquiry[]
  estate         estate?                  @relation(fields: [estateId], references: [id])
  lotZoningRules lotZoningRule[]

  @@index([geometry], map: "geometry_index")
}

model zoningRule {
  id                    BigInt          @id @default(autoincrement())
  code                  String          @unique
  name                  String
  type                  String
  isOverlay             Boolean         @default(false)
  maxBuildingHeight_m   Float?
  maxStoreys            Int?
  minLotArea_sqm        Float?
  minLotWidth_m         Float?
  minLotDepth_m         Float?
  minFrontageStandard_m Float?
  minFrontageCorner_m   Float?
  minFSR                Float?
  maxFSR                Float?
  minFrontSetback_m     Float?
  minRearSetback_m      Float?
  minSideSetback_m      Float?
  appliesToZones        String[]
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  lotZoningRules        lotZoningRule[]
}

model lotZoningRule {
  lotId        BigInt
  zoningRuleId BigInt
  isOverlay    Boolean    @default(false)
  lot          lot        @relation(fields: [lotId], references: [id], onDelete: Cascade)
  zoningRule   zoningRule @relation(fields: [zoningRuleId], references: [id], onDelete: Cascade)

  @@id([lotId, zoningRuleId])
}

model houseDesign {
  id           BigInt        @id @default(autoincrement())
  name         String
  floorplanUrl String?
  bedrooms     Int
  bathrooms    Int
  garages      Int
  areaSqm      Float
  minLotWidth  Float
  minLotDepth  Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  rumpus       Boolean
  alfresco     Boolean
  pergola      Boolean
  designOnLots designOnLot[]
  enquiries    enquiry[]
  facades      facade[]
}

model facade {
  id            BigInt      @id @default(autoincrement())
  label         String
  imageUrl      String
  houseDesignId BigInt
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  enquiries     enquiry[]
  houseDesign   houseDesign @relation(fields: [houseDesignId], references: [id], onDelete: Cascade)
}

model designOnLot {
  id             BigInt      @id @default(autoincrement())
  lotId          BigInt
  houseDesignId  BigInt
  isCompatible   Boolean
  matchedFilters Json?
  createdAt      DateTime    @default(now())
  houseDesign    houseDesign @relation(fields: [houseDesignId], references: [id], onDelete: Cascade)
  lot            lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([lotId, houseDesignId])
}

model builder {
  id              BigInt           @id @default(autoincrement())
  name            String
  email           String
  phone           String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  enquiryBuilders enquiryBuilder[]
}

model enquiry {
  id              BigInt           @id @default(autoincrement())
  name            String
  email           String
  phone           String
  comments        String?
  lotId           BigInt?
  houseDesignId   BigInt?
  facadeId        BigInt?
  createdAt       DateTime         @default(now())
  facade          facade?          @relation(fields: [facadeId], references: [id])
  houseDesign     houseDesign?     @relation(fields: [houseDesignId], references: [id])
  lot             lot?             @relation(fields: [lotId], references: [id])
  enquiryBuilders enquiryBuilder[]
}

model enquiryBuilder {
  id        BigInt   @id @default(autoincrement())
  enquiryId BigInt
  builderId BigInt
  createdAt DateTime @default(now())
  builder   builder  @relation(fields: [builderId], references: [id], onDelete: Cascade)
  enquiry   enquiry  @relation(fields: [enquiryId], references: [id], onDelete: Cascade)

  @@unique([enquiryId, builderId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}
